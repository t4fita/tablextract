import { json } from '@sveltejs/kit';
import type { RequestEvent } from '@sveltejs/kit';
import { supabase } from '$lib/supabase';

/**
 * POST handler for exporting table data to HTML
 */
export const POST = async ({ request }: RequestEvent) => {
  // Get the session from the request
  const authHeader = request.headers.get('Authorization');
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  const token = authHeader.split(' ')[1];
  const { data: { user }, error: authError } = await supabase.auth.getUser(token);
  
  if (authError || !user) {
    return json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  try {
    // Get request body
    const body = await request.json();
    
    if (!body.data || !Array.isArray(body.data)) {
      return json({ error: 'Invalid data format' }, { status: 400 });
    }
    
    // Extract table data
    const tableData = body.data;
    const title = body.title || 'Extracted Table';
    
    // Generate HTML table
    let htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${escapeHtml(title)}</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    h1 {
      text-align: center;
      margin-bottom: 20px;
      color: #2563eb;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    th {
      background-color: #2563eb;
      color: white;
      font-weight: bold;
      text-align: left;
      padding: 10px;
      border: 1px solid #ddd;
    }
    td {
      padding: 10px;
      border: 1px solid #ddd;
    }
    tr:nth-child(even) {
      background-color: #f2f7ff;
    }
    tr:hover {
      background-color: #e6f0ff;
    }
    .footer {
      text-align: center;
      margin-top: 20px;
      font-size: 0.8em;
      color: #666;
    }
  </style>
</head>
<body>
  <h1>${escapeHtml(title)}</h1>
  <table>
    <thead>
      <tr>
`;

    // Add headers
    const tableHeaders = tableData[0] || [];
    tableHeaders.forEach((header: any) => {
      htmlContent += `        <th>${escapeHtml(String(header || ''))}</th>\n`;
    });

    htmlContent += `      </tr>
    </thead>
    <tbody>
`;

    // Add rows
    const rows = tableData.slice(1) || [];
    rows.forEach((row: any[]) => {
      htmlContent += '      <tr>\n';
      row.forEach(cell => {
        htmlContent += `        <td>${escapeHtml(String(cell || ''))}</td>\n`;
      });
      htmlContent += '      </tr>\n';
    });

    htmlContent += `    </tbody>
  </table>
  <div class="footer">
    Generated by Tablextract on ${new Date().toLocaleDateString()}
  </div>
</body>
</html>`;

    // Set headers for HTML download
    const responseHeaders = new Headers();
    responseHeaders.append('Content-Type', 'text/html');
    responseHeaders.append('Content-Disposition', `attachment; filename="table-export-${new Date().toISOString().split('T')[0]}.html"`);
    
    // Return the HTML content
    return new Response(htmlContent, {
      status: 200,
      headers: responseHeaders
    });
  } catch (error) {
    console.error('Error exporting to HTML:', error);
    return json({ error: 'Internal server error' }, { status: 500 });
  }
};

/**
 * Helper function to escape HTML special characters
 */
function escapeHtml(unsafe: string): string {
  return unsafe
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
} 